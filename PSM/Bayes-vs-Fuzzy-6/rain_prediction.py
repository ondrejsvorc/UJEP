# -*- coding: utf-8 -*-
"""Rain_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17_pae3SlCYh_NYSpNMDPum4UEgup6qib
"""

from google.colab import drive
drive.mount('/content/drive')

"""Data loading and preparing"""

path = '/content/drive/MyDrive/2024_2025/PSM_2024_2025/Bayes_Fuzzy_Final/weatherAUS.csv'

!pip install scikit-fuzzy

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix

import skfuzzy as fuzz
from skfuzzy import control as ctrl
from skfuzzy.control import Rule

import seaborn as sns
import matplotlib.pyplot as plt

data = pd.read_csv(path, delimiter=';')

features = ['WindGustSpeed', 'Humidity9am', 'Humidity3pm', 'Pressure9am', 'RainTomorrow']
df = data[features].copy()

df.dropna(inplace=True)

df['RainTomorrow'] = df['RainTomorrow'].map({'Yes': 1, 'No': 0})

print(df.head(10))

X = df.drop('RainTomorrow', axis=1)
y = df['RainTomorrow']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

"""Define Universes & Membership Functions"""

# Step 1: Define fuzzy variables
wind = ctrl.Antecedent(np.arange(0, 100, 0.1), 'WindGustSpeed')
hum9 = ctrl.Antecedent(np.arange(0, 100, 0.1), 'Humidity9am')
hum3 = ctrl.Antecedent(np.arange(0, 100, 0.1), 'Humidity3pm')
pressure = ctrl.Antecedent(np.arange(980, 1040, 1), 'Pressure9am')
rain = ctrl.Consequent(np.arange(0, 1, 0.01), 'RainTomorrow')

# Step 2: Define membership functions for inputs
wind['low'] = fuzz.trapmf(wind.universe, [0, 0, 10, 50])
wind['medium'] = fuzz.trapmf(wind.universe, [20, 40, 60, 80])
wind['high'] = fuzz.trapmf(wind.universe, [50, 90, 100, 100])

hum9['low'] = fuzz.trimf(hum9.universe, [0, 0, 50])
hum9['medium'] = fuzz.trimf(hum9.universe, [30, 50, 70])
hum9['high'] = fuzz.trimf(hum9.universe, [50, 100, 100])

hum3['low'] = fuzz.trimf(hum3.universe, [0, 0, 50])
hum3['medium'] = fuzz.trimf(hum3.universe, [30, 50, 70])
hum3['high'] = fuzz.trimf(hum3.universe, [50, 100, 100])

pressure['low'] = fuzz.trimf(pressure.universe, [980, 990, 1010])
pressure['medium'] = fuzz.trimf(pressure.universe, [1005, 1015, 1025])
pressure['high'] = fuzz.trimf(pressure.universe, [1020, 1030, 1040])

# Step 3: Define membership functions for output
rain['no'] = fuzz.trapmf(rain.universe, [0, 0, 0.3, 0.5])
rain['yes'] = fuzz.trapmf(rain.universe, [0.3, 0.5, 1, 1])

wind.view()

hum9.view()

hum3.view()

pressure.view()

rain.view()

"""Define Fuzzy Rules"""

rules = [
    Rule(wind['high'] & hum9['high'], rain['yes']),
    Rule(wind['low'] & hum3['low'], rain['no']),
    Rule(hum9['medium'] & hum3['high'], rain['yes']),
    Rule(wind['medium'] & hum9['low'], rain['no']),
    Rule(wind['high'] & hum3['high'], rain['yes']),
    Rule(pressure['low'] & hum9['high'], rain['yes']),
    Rule(pressure['high'] & hum9['low'], rain['no']),
    Rule(wind['medium'] & pressure['low'], rain['yes']),
    Rule(hum9['high'] & pressure['low'], rain['yes']),
    Rule(hum3['high'] & wind['high'], rain['yes']),
    Rule(hum9['high'] & hum3['high'], rain['yes']),
]

"""Create Control System & Simulate"""

rain_ctrl = ctrl.ControlSystem(rules)
rain_sim = ctrl.ControlSystemSimulation(rain_ctrl)

"""Predict on Test Set"""

# Step 2: Predict using the fuzzy system
y_pred_fuzzy = []

# You can limit this for performance (e.g., first 100 samples)
for i in range(len(X_test)):
    # Set inputs
    rain_sim.input['WindGustSpeed'] = X_test.iloc[i]['WindGustSpeed']
    rain_sim.input['Humidity9am'] = X_test.iloc[i]['Humidity9am']
    rain_sim.input['Humidity3pm'] = X_test.iloc[i]['Humidity3pm']

    # Compute result
    try:
        rain_sim.compute()
        result = rain_sim.output['RainTomorrow']
        y_pred_fuzzy.append(1 if result >= 0.4 else 0)  # threshold
    except:
        y_pred_fuzzy.append(0)  # default fallback

"""Evaluate Fuzzy Model"""

print("Fuzzy Inference System Results:")
print("Accuracy:", accuracy_score(y_test[:len(y_pred_fuzzy)], y_pred_fuzzy))

cm = confusion_matrix(y_test[:len(y_pred_fuzzy)], y_pred_fuzzy)
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['No Rain', 'Rain'], yticklabels=['No Rain', 'Rain'])
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix â€“ Fuzzy Inference System')
plt.tight_layout()
plt.show()